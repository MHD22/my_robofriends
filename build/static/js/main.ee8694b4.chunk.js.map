{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorB.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","n","e","i","className","src","parseInt","alt","CardList","robots","map","user","x","key","name","email","id","SearchBox","props","type","style","width","textAlign","placeholder","onChange","SearchChange","Scroll","borderTop","overflow","height","children","ErrorB","state","hasError","this","setState","Component","App","onSearchChange","event","schfield","target","value","rob","fetch","then","response","json","users","robfilter","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAgBeA,EAdF,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,EAAIC,EAAW,EAAXA,EAAIC,EAAO,EAAPA,EACtB,OAEC,yBAAKC,UAAY,mEAChB,yBAAKC,IAAG,+BAA0BC,SAASH,GAAnC,YAAiDI,IAAI,SAC7D,gCAAMN,EAAN,KACA,+BAAKC,EAAL,OCQYM,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAClB,OACC,kBAAC,WAAD,KAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,EAAGQ,EAAOG,GAAGE,KAAMZ,EAAGO,EAAOG,GAAGG,MAAOZ,EAAGM,EAAOG,GAAGI,UCM1DC,EAZG,SAACC,GAClB,OACC,yBAAKd,UAAU,OACf,2BAAOe,KAAK,SACZC,MAAS,CAACC,MAAQ,OAASC,UAAY,UACtCC,YAAY,iBACZC,SAAYN,EAAMO,aAClBrB,UAAU,uCCGEsB,EAXA,SAACR,GAEf,OACC,yBAAKE,MAAQ,CAACO,UAAU,iBAAkBC,SAAW,SAAUC,OAAS,SACtEX,EAAMY,WCSKC,E,kDAXd,WAAYb,GAAO,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CAAEC,UAAW,GAFT,E,gEAKjBC,KAAKC,SAAS,CAACF,UAAW,M,+BAG1B,OAAOC,KAAKF,MAAMC,SAAW,uDAAoCC,KAAKhB,MAAMY,a,GATzDM,aC6CNC,G,wDAxCd,aAAc,IAAD,8BACZ,gBAcDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAACK,SAAWD,EAAME,OAAOC,SAdvC,EAAKV,MAAM,CACVW,IAAI,GACJH,SAAS,IAJE,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACQ,IAAMK,S,+BAO5B,IAAD,EACiBd,KAAKF,MAAtBW,EADA,EACAA,IAAKH,EADL,EACKA,SACNS,EAAYN,EAAIO,QAAO,SAAAP,GAC7B,OAAOA,EAAI7B,KAAKqC,cAAcC,SAASZ,EAASW,kBAEhD,OAAOR,EAAIU,OAET,yBAAKjD,UAAU,MACf,6CACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAYqB,aAAcS,KAAKI,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU7B,OAAQwC,OAIhB,4D,GAnCUK,IAAMlB,YCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAGDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee8694b4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({n , e , i}) => {\n\treturn(\n\t\t\n\t\t<div className = 'bg-light-green dib tc br3 pa3 ma2 grow bw2 shadow-5 b--gray ba '>\n\t\t\t<img src={`https://robohash.org/${parseInt(i)}?200x200`} alt='aads' />\n\t\t\t<h2> {n} </h2>\n\t\t\t<p> {e} </p>\n\t\t</div>\n\t\t\n\n\n\n\t);\n}\nexport default Card;\n\n","import React , {Fragment}  from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\treturn (\n\t\t<Fragment>\n\t\t\t{\n\t\t\t\trobots.map((user ,x) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card key={x} n={robots[x].name} e={robots[x].email} i={robots[x].id} />\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t}\n\t\t</Fragment>\n\t);\n}\nexport default CardList;","import React from 'react'; \n\n\nconst SearchBox = (props) => {\n\treturn(\n\t\t<div className='pa2' >\n\t\t<input type='search' \n\t\tstyle = {{width : '20vw' , textAlign : 'center'}}\n\t\t placeholder='search robots '\n\t\t onChange = {props.SearchChange}\n\t\t className='pa3 ba b--green bg-lightest-blue' />\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n\treturn(\n\t\t<div style= {{borderTop:'2px solid grey', overflow : 'scroll', height : '80vh'}} >\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\n\n\nexport default Scroll; ","import React , {Component} from 'react';\n\n\nclass ErrorB extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = { hasError : false };\n\t}\n\tcomponentDidCatch(){\n\t\tthis.setState({hasError : true});\n\t}\n\trender(){\n\t\treturn this.state.hasError? (<h1> ooobs that's Error !! </h1>) : this.props.children ;\n\t}\n}\nexport default ErrorB ; ","import React  from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorB from '../components/ErrorB';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\trob:[],\n\t\t\tschfield:''\n\t\t}\n\t\t\n\t}\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({rob : users}));\n\t\t\n\t}\n\n\tonSearchChange= (event)=>{\n\t\tthis.setState({schfield : event.target.value});\n\t}\n\trender(){\n\t\tconst {rob ,schfield} = this.state ;\n\t\tconst robfilter = rob.filter(rob => {\n\t\treturn rob.name.toLowerCase().includes(schfield.toLowerCase());\n\t\t});\n\t\treturn rob.length?\n\n\t\t\t(<div className='tc'>\n\t\t\t\t<h1> RoboFriends </h1>\n\t\t\t\t<ErrorB>\n\t\t\t\t\t<SearchBox  SearchChange={this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={robfilter}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</ErrorB>\n\t\t\t</div>\n\t\t\t) : (<h1> Loading, please wait...</h1>);\n\t}\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}